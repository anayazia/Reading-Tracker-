// Import necessary modules and components
import * as React from "react";
import { createRoot } from "react-dom/client";
import {
  SparkApp,
  PageContainer,
  Button,
  Input,
  Card,
  Select,
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@github/spark/components";
import { useKV } from "@github/spark/hooks";
import {
  PlayCircle,
  PauseCircle,
  StopCircle,
  MagnifyingGlass,
} from "@phosphor-icons/react";

// BookItem component
const BookItem = ({ book, onChangeStatus, onDelete, onUpdateBook }) => {
  const [isReading, setIsReading] = React.useState(false);
  const [elapsedTime, setElapsedTime] = React.useState(book.timeSpentReading || 0);
  const [timer, setTimer] = React.useState(null);
  const [pagesRead, setPagesRead] = React.useState(book.pagesRead || 0);

  const startReading = () => {
    setIsReading(true);
    const startTime = Date.now() - elapsedTime;
    setTimer(
      setInterval(() => {
        setElapsedTime(Date.now() - startTime);
      }, 1000)
    );
  };

  const pauseReading = () => {
    setIsReading(false);
    clearInterval(timer);
  };

  const stopReading = () => {
    setIsReading(false);
    clearInterval(timer);
    onUpdateBook(book.id, { timeSpentReading: elapsedTime, pagesRead });
  };

  const formatTime = (ms) => {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    return `${hours.toString().padStart(2, '0')}:${(minutes % 60).toString().padStart(2, '0')}:${(seconds % 60).toString().padStart(2, '0')}`;
  };

  return (
    <Card className="mb-4 p-4">
      <Dialog>
        <DialogTrigger asChild>
          <Button variant="plain">{book.title}</Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{book.title}</DialogTitle>
            <DialogDescription>Book Details</DialogDescription>
          </DialogHeader>
          <div className="space-y-2">
            <p><strong>Author:</strong> {book.author}</p>
            <p><strong>Genre:</strong> {book.genre}</p>
            <p><strong>Status:</strong> {book.status}</p>
            <p><strong>Pages Read:</strong> {pagesRead}</p>
            <Input
              type="number"
              value={pagesRead}
              onChange={(e) => setPagesRead(Number(e.target.value))}
              placeholder="Pages read"
            />
            <p><strong>Time Spent Reading:</strong> {formatTime(elapsedTime)}</p>
            <div className="flex space-x-2">
              {!isReading ? (
                <Button onClick={startReading} icon={<PlayCircle />}>Start</Button>
              ) : (
                <Button onClick={pauseReading} icon={<PauseCircle />}>Pause</Button>
              )}
              <Button onClick={stopReading} icon={<StopCircle />}>Stop</Button>
            </div>
          </div>
          <DialogFooter>
            <Select
              value={book.status}
              onChange={(e) => onChangeStatus(book.id, e.target.value)}
            >
              <option value="Want to Read">Want to Read</option>
              <option value="Reading">Reading</option>
              <option value="Completed">Completed</option>
            </Select>
            <Button onClick={() => onDelete(book.id)} variant="secondary">Delete</Button>
            <DialogClose asChild>
              <Button variant="primary">Close</Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
};

// AddBookForm component
const AddBookForm = ({ onAddBook }) => {
  const [title, setTitle] = React.useState("");
  const [author, setAuthor] = React.useState("");
  const [genre, setGenre] = React.useState("");
  const [status, setStatus] = React.useState("Want to Read");

  const handleSubmit = (e) => {
    e.preventDefault();
    const newBook = {
      id: Date.now(),
      title,
      author,
      genre,
      status,
      pagesRead: 0,
      timeSpentReading: 0,
    };
    onAddBook(newBook);
    setTitle("");
    setAuthor("");
    setGenre("");
    setStatus("Want to Read");
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-2 mb-4">
      <Input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Title"
        required
      />
      <Input
        type="text"
        value={author}
        onChange={(e) => setAuthor(e.target.value)}
        placeholder="Author"
        required
      />
      <Input
        type="text"
        value={genre}
        onChange={(e) => setGenre(e.target.value)}
        placeholder="Genre"
        required
      />
      <Select
        value={status}
        onChange={(e) => setStatus(e.target.value)}
      >
        <option value="Want to Read">Want to Read</option>
        <option value="Reading">Reading</option>
        <option value="Completed">Completed</option>
      </Select>
      <Button type="submit" variant="primary">Add Book</Button>
    </form>
  );
};

// Binary search functions
const binarySearchByAuthor = (books, author) => {
  let left = 0;
  let right = books.length - 1;
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (books[mid].author.toLowerCase() === author.toLowerCase()) return mid;
    if (books[mid].author.toLowerCase() < author.toLowerCase()) left = mid + 1;
    else right = mid - 1;
  }
  return -1;
};

const binarySearchByTitle = (books, title) => {
  let left = 0;
  let right = books.length - 1;
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (books[mid].title.toLowerCase() === title.toLowerCase()) return mid;
    if (books[mid].title.toLowerCase() < title.toLowerCase()) left = mid + 1;
    else right = mid - 1;
  }
  return -1;
};

// Login component for user authentication
const Login = ({ onLogin }) => {
  const [username, setUsername] = React.useState("");
  const [password, setPassword] = React.useState("");
  const [color, setColor] = React.useState("purple");

  const handleSubmit = (e) => {
    e.preventDefault();
    onLogin(username, color);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Input
        type="text"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="Username"
      />
      <Input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <Select
        value={color}
        onChange={(e) => setColor(e.target.value)}
        className="mb-2"
      >
        <option value="purple">Purple</option>
        <option value="dark blue">Dark Blue</option>
        <option value="light blue">Light Blue</option>
        <option value="dark red">Dark Red</option>
        <option value="light red">Light Red</option>
        <option value="black">Black</option>
      </Select>
      <Button type="submit" variant="primary">
        Log In
      </Button>
    </form>
  );
};

// Main App component
const App = () => {
  // Using useKV hook to persist books and user data
  const [books, setBooks] = useKV("books", []);
  const [userData, setUserData, deleteUserData] = useKV("userData", null);

  const [searchTerm, setSearchTerm] = React.useState("");
  const [searchBy, setSearchBy] = React.useState("author");
  const [searchResults, setSearchResults] = React.useState([]);

  // Ensure books is always an array
  React.useEffect(() => {
    if (!Array.isArray(books)) {
      setBooks([]);
    }
  }, [books]);

  // Function to add a new book
  const addBook = (newBook) => {
    setBooks([...books, newBook]);
  };

  // Function to delete a book
  const deleteBook = (id) => {
    setBooks(books.filter((book) => book.id !== id));
  };

  // Function to change the status of a book
  const changeStatus = (id, newStatus) => {
    setBooks(
      books.map((book) =>
        book.id === id ? { ...book, status: newStatus } : book
      )
    );
  };

  // Function to update book details
  const updateBook = (id, updates) => {
    setBooks(
      books.map((book) =>
        book.id === id ? { ...book, ...updates } : book
      )
    );
  };

  // Handle search functionality
  const handleSearch = () => {
    // Ensure books is an array
    if (!Array.isArray(books)) return;

    const sortedBooks = [...books].sort((a, b) =>
      searchBy === "author"
        ? a.author.localeCompare(b.author)
        : a.title.localeCompare(b.title)
    );
    const index =
      searchBy === "author"
        ? binarySearchByAuthor(sortedBooks, searchTerm)
        : binarySearchByTitle(sortedBooks, searchTerm);
    if (index !== -1) {
      setSearchResults([sortedBooks[index]]);
    } else {
      setSearchResults([]);
    }
  };

  const handleLogin = (username, color) => {
    setUserData({ username, color });
  };

  const handleLogout = () => {
    setUserData(null);
  };

  const getBackgroundColor = () => {
    switch (userData?.color) {
      case 'dark blue':
        return 'bg-blue-900';
      case 'light blue':
        return 'bg-blue-400';
      case 'dark red':
        return 'bg-red-900';
      case 'light red':
        return 'bg-red-400';
      case 'black':
        return 'bg-neutral-900';
      default:
        return 'bg-purple-500';
    }
  };

  if (!userData) {
    return (
      <SparkApp className={getBackgroundColor()}>
        <PageContainer maxWidth="small">
          <h1 className="text-2xl font-bold mb-4">Reading Tracker</h1>
          <Login onLogin={handleLogin} />
        </PageContainer>
      </SparkApp>
    );
  }

  return (
    <SparkApp className={getBackgroundColor()}>
      <PageContainer maxWidth="medium">
        <h1 className="text-2xl font-bold mb-4">Reading Tracker</h1>
        <p className="mb-4">Welcome, {userData.username}!</p>
        <Button
          onClick={handleLogout}
          variant="secondary"
          className="mb-4"
        >
          Log Out
        </Button>

        <h2 className="text-xl font-semibold mb-2">Add a New Book</h2>
        <AddBookForm onAddBook={addBook} />

        <h2 className="text-xl font-semibold mb-2">Search Books</h2>
        <div className="flex space-x-2 mb-4">
          <Input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search term"
            className="flex-grow"
          />
          <Select
            value={searchBy}
            onChange={(e) => setSearchBy(e.target.value)}
          >
            <option value="author">Author</option>
            <option value="title">Title</option>
          </Select>
          <Button
            onClick={handleSearch}
            icon={<MagnifyingGlass />}
          >
            Search
          </Button>
        </div>

        {searchResults.length > 0 && (
          <div className="mb-4">
            <h3 className="text-lg font-semibold mb-2">
              Search Results
            </h3>
            {searchResults.map((book) => (
              <BookItem
                key={book.id}
                book={book}
                onChangeStatus={changeStatus}
                onDelete={deleteBook}
                onUpdateBook={updateBook}
              />
            ))}
          </div>
        )}

        <h2 className="text-xl font-semibold mb-2">Your Books</h2>
        {["Want to Read", "Reading", "Completed"].map((status) => (
          <div key={status}>
            <h3 className="text-lg font-semibold mb-2">{status}</h3>
            {books
              .filter((book) => book.status === status)
              .map((book) => (
                <BookItem
                  key={book.id}
                  book={book}
                  onChangeStatus={changeStatus}
                  onDelete={deleteBook}
                  onUpdateBook={updateBook}
                />
              ))}
          </div>
        ))}
      </PageContainer>
    </SparkApp>
  );
};

// Render the App component
const root = createRoot(document.getElementById("root"));
root.render(<App />);

